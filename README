 -- About --

This is a library of utility functions that are useful in large, distributed
computing environments. This is work in progress, and the functionality and API
are subject to change. The terms in the "LICENSE" file apply for using this
software. Inquiries can be sent to <nompelis@umn.edu>.

----------------------------------------------------------------------------
 -- API calls --
-----------------

int inMPI_DSDE_Global_WindowExchange( int nproc,
                                      int irank,
                                      MPI_Comm comm,
                                      const int *isend,
                                      int *irecv);

 nproc = number of MPI ranks used
 irank = current process rank
 comm = a communicator (like MPI_COMM_WORLD)
 isend = a pointer to an array of integer constants sized by "nproc"
 irecv = a pointer to an array of integers sized by "nproc"

Each non-zero integer found in the array pointed to by isend is transmitted
to the array pointed to by irecv on the process with rank corresponding to
the position in the isend array.

-----------------

int inMPI_DPmutex_Init( MPI_Comm comm, int iverbose );

 comm = MPI communicator (not MPI_COMM_NULL) on which the distributed-parallel
        mutex is meant to operate
 iverbose = integer that should idealy be zero

int inMPI_DPmutex_Lock();

int inMPI_DPmutex_Unlock();

int inMPI_DPmutex_Term();

Initializes a distributed parallel mutual exclusion (mutex) variable on a
particular set of MPI processes associated with a given communicator. Locking
and unlocking return zero on success. Termination unlocks the mutex regardless
of its state. Both initialization and termination are collective calls.

-----------------

int inMPI_DPsemaphore_Init( MPI_Comm comm, int imaster, int iverbose );

 comm = MPI communicator (not MPI_COMM_NULL) on which the distributed-parallel
        mutex is meant to operate
 imaster = rank of the MPI process that is the semaphore handler
 iverbose = integer that should idealy be zero

int inMPI_DPsemaphore_SetNumber( long icount );

 icount = positive integer representing the extent of the resource

int inMPI_DPsemaphore_Request( long *inumber );

 inumber = the returned non-zero integer of the state of the semaphore

int inMPI_DPsemaphore_Term();

Initializes a distributed parallel semaphore on a particular set of MPI
processes associated with a given communicator. The master process that
can control the semaphore's counter must be specified at initialization.
Only the master process can (re)set the semaphore's internal counter.
The requested number is returned to be a non-zero integer; appropriate
error trapping returns error codes. Instantiation and termination are
collective operations. Re-setting of the semaphore's internal counter can
be done at any time.

----------------------------------------------------------------------------

IN 2016/12/11

